!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
dbg	non_ivar_wavefront.cpp	/^static const int dbg = 0;$/;"	v	file:
dbg	wavefront.cpp	/^static const int dbg = 0;$/;"	v	file:
dim	non_ivar_wavefront.cpp	/^int dim = 2;$/;"	v
dim	wavefront.cpp	/^int dim = 2;$/;"	v
divide_and_conquer	non_ivar_wavefront.cpp	/^void divide_and_conquer(int i, int j, int w, int h) $/;"	f
divide_and_conquer	wavefront.cpp	/^void divide_and_conquer(int i, int j, int w, int h) $/;"	f
do_row	non_ivar_wavefront.cpp	/^void do_row(int i) {$/;"	f
do_row	wavefront.cpp	/^void do_row(int i) {$/;"	f
do_tile	non_ivar_wavefront.cpp	/^void do_tile(int i, int j) $/;"	f
do_tile	wavefront.cpp	/^void do_tile(int i, int j) $/;"	f
get	non_ivar_wavefront.cpp	/^    const T& get(){$/;"	f	class:myvar
isPowerOfTwo	non_ivar_wavefront.cpp	/^int isPowerOfTwo (unsigned int x)$/;"	f
isPowerOfTwo	wavefront.cpp	/^int isPowerOfTwo (unsigned int x)$/;"	f
lower_helper	non_ivar_wavefront.cpp	/^void lower_helper(int decomp, int x0, int y0, int x1, int y1, int x2, int y2) {$/;"	f
lower_helper	wavefront.cpp	/^void lower_helper(int decomp, int x0, int y0, int x1, int y1, int x2, int y2) {$/;"	f
lowertri	non_ivar_wavefront.cpp	/^void lowertri(int x0, int y0, int x1, int y1, int x2, int y2) $/;"	f
lowertri	wavefront.cpp	/^void lowertri(int x0, int y0, int x1, int y1, int x2, int y2) $/;"	f
main	non_ivar_wavefront.cpp	/^int main(int argc, char** argv) $/;"	f
main	wavefront.cpp	/^int main(int argc, char** argv) $/;"	f
matrix	non_ivar_wavefront.cpp	/^vector< myvar <tile*> >* matrix;$/;"	v
matrix	wavefront.cpp	/^vector< ivar<tile*> >* matrix;$/;"	v
matrix_get	non_ivar_wavefront.cpp	/^tile* matrix_get(int i, int j) {$/;"	f
matrix_get	wavefront.cpp	/^tile* matrix_get(int i, int j) {$/;"	f
matrix_put	non_ivar_wavefront.cpp	/^void matrix_put(int i, int j, tile* val) {$/;"	f
matrix_put	wavefront.cpp	/^void matrix_put(int i, int j, tile* val) {$/;"	f
myvar	non_ivar_wavefront.cpp	/^class myvar{$/;"	c	file:
put	non_ivar_wavefront.cpp	/^    void put(const T& data){$/;"	f	class:myvar
reps	non_ivar_wavefront.cpp	/^int reps = 1; \/\/ An intensifying coefficient.$/;"	v
reps	wavefront.cpp	/^int reps = 1; \/\/ An intensifying coefficient.$/;"	v
spawn_cones	non_ivar_wavefront.cpp	/^void spawn_cones() $/;"	f
spawn_cones	wavefront.cpp	/^void spawn_cones() $/;"	f
spawn_cones2	non_ivar_wavefront.cpp	/^void spawn_cones2()$/;"	f
spawn_cones2	wavefront.cpp	/^void spawn_cones2()$/;"	f
sum_matrix	non_ivar_wavefront.cpp	/^unsigned long long sum_matrix() $/;"	f
sum_matrix	wavefront.cpp	/^unsigned long long sum_matrix() $/;"	f
sum_tile	non_ivar_wavefront.cpp	/^void sum_tile(tile* dest, tile* src) {$/;"	f
sum_tile	wavefront.cpp	/^void sum_tile(tile* dest, tile* src) {$/;"	f
tile	non_ivar_wavefront.cpp	/^    tile() : vec(tiledim*tiledim)$/;"	f	class:tile
tile	non_ivar_wavefront.cpp	/^class tile {$/;"	c	file:
tile	wavefront.cpp	/^    tile() : vec(tiledim*tiledim)$/;"	f	class:tile
tile	wavefront.cpp	/^class tile {$/;"	c	file:
tiledim	non_ivar_wavefront.cpp	/^int tiledim = 2;$/;"	v
tiledim	wavefront.cpp	/^int tiledim = 2;$/;"	v
traverse1	non_ivar_wavefront.cpp	/^void traverse1() $/;"	f
traverse1	wavefront.cpp	/^void traverse1() $/;"	f
traverse2	non_ivar_wavefront.cpp	/^void traverse2() $/;"	f
traverse2	wavefront.cpp	/^void traverse2() $/;"	f
upper_helper	non_ivar_wavefront.cpp	/^void upper_helper(int decomp, int x0, int y0, int x1, int y1, int x2, int y2) {$/;"	f
upper_helper	wavefront.cpp	/^void upper_helper(int decomp, int x0, int y0, int x1, int y1, int x2, int y2) {$/;"	f
uppertri	non_ivar_wavefront.cpp	/^void uppertri(int x0, int y0, int x1, int y1, int x2, int y2) $/;"	f
uppertri	wavefront.cpp	/^void uppertri(int x0, int y0, int x1, int y1, int x2, int y2) $/;"	f
val	non_ivar_wavefront.cpp	/^    T val;$/;"	m	class:myvar	file:
vec	non_ivar_wavefront.cpp	/^    vector<int> vec;$/;"	m	class:tile	file:
vec	wavefront.cpp	/^    vector<int> vec;$/;"	m	class:tile	file:
version	non_ivar_wavefront.cpp	/^char* version = "parfor2";$/;"	v
version	wavefront.cpp	/^char* version = "parfor2";$/;"	v
